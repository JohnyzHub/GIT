GIT Clear Screen : CTRL+L

GIT Config :

		$ git config --global user.name "Some Name"
		$ git config --global user.email "Name@email.com"


		git config --global commit.template <path to file>
			Eg: git config commit.template c:\GITPractise\GITFolder\gittemplate.gitmessage
			OR
			git config commit.template c:\CommitEditor.txt


GIT Init:
		Instead of just initializing a new git repository, it would be a good practice to add a empty root commit
		git init && git commit -m "root" --allow-empty
			

GIT Log:			
			
		git log <file name>
			Eg: git log --pretty=oneline File1.txt
				or
			git log File1.txt	
				While using this 'git log filename' command, if the log history is too long, press 's'. This enable prompt for creating a log file. Enter some name. Hit enter. This creates a log file in the current folder with the given name. To quit this mode press 'q' on 					bash editor 

		git whatchanged --since '04/14/2013' --until '05/22/2014' --oneline --name-only --pretty=format:%an%an | sort | uniq 

		git log --since="1 month ago"
		
		git log --since="2 weeks 3 days 2 hours 30 minutes 59 seconds ago"

		For more graphical log history: 
			git log --graph --abbrev-commit --decorate --all --format=format:"%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)"

		For current month
			git log  --graph --abbrev-commit --decorate --all --format=format:"%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C	
			(white)%s%C(reset)" --after={'date "+%Y-%m-01"'}			

GIT Show 
		Showing the changes of a perticular commit if you know the commit hascode.
		git show <hashcode>			
		Atleast first 4 digits of the Hashcode are necessary to identify the commit.

GIT Stash:
		
		git stash list
		
		git stash save "<description>"
		
		git stash apply stash@{number}
		
		git stash show stash@{number}   Eg : git stash show stash@{0}
		
		git stash drop stash@{number}
		
		git stash clear
		
		
		
		
GIT Ignore: 
	Specify the regex pattern of the files to ignore in .ignore Eg: *.idea
	Alternatively you can add regex pattern of the file to the 'exclude' file uder .git/info folder.		
		

GIT Alias : 
	We can use alias name for the long git commands 
			Eg: git config --global alias.please 'push --force-with-lease'		
			In this, please is the alias name for the command 'push --force-with-lease'
	To remove alias, use --unset  Eg: git config --global --unset alias.<aliasname>
	
	Imp Note: To use apostrophe(') in the alias command, use '"'"'
	For more details refer - http://stackoverflow.com/questions/1250079/how-to-escape-single-quotes-within-single-quoted-strings

GIT Ammend : 
	Ever commit and then immediately realize you’d forgotten to stage a file? 
	'commit --amend --no-edit' , quietly tacks any staged files onto the last commit you created, re-using your existing commit message. This works good as long as you haven’t pushed the last commit yet.
				
				
		
GIT Status:

	GIT Status --short --branch   lists the files in a very neat way than the regular git status command.
				
			