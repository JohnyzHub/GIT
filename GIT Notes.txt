GIT Clear Screen : CTRL+L

GIT Config :

		$ git config --global user.name "Some Name"
		$ git config --global user.email "Name@email.com"


		git config --global commit.template <path to file>
			Eg: git config commit.template c:\GITPractise\GITFolder\gittemplate.gitmessage
			OR
			git config commit.template c:\CommitEditor.txt
			
		to locate .gitconfig file:
			git config --list --show-origin


GIT Init:
		Instead of just initializing a new git repository, it would be a good practice to add a empty root commit
		git init && git commit -m "root" --allow-empty
			

GIT Remote:    git remote add <name> <remote path>  
				-- If local repo and the remote repo are same but are not linked, 
	       				this command links the remote repo to the current repo.
					Eg: git remote add origin <git repo>
							    
		git branch --set-upstream-to=origin/master master 
				-- local master branch tracks remote master branch as an upstream.
		                        If the local repo is new and doesn't have any branch yet, 
					do git fetch && git checkout master is enough to set upstream tracking.
		git clone <remote path>	 -- 	Clones the remote repo in the local drive.
   		git push		 --	Pushes the changes from local repo to linked remote repo
		git pull		 --	Pulls and merges the changes from linked remote repo to the local repo. 
	
GIT Branch
		git branch <name> 	-- creates a new branch
		git checkout -b <name> 	-- Creates a new branch and switches to this newly created branch
		git push -u origin <new_branch> -- Pushes this new branch to the remote repository and starts tracking it.
		
		Renaming current branch:
			$ git branch new-branch-name origin/old-branch-name  (Creates a new branch with desired name from old branch)
			$ git push origin --set-upstream new-branch-name     (Adds this new branch to the remote repo and starts
										tracking it)
			$ git push origin :old-branch-name                   (Deletes the old branch)
								(Do not forget to switch to new branch after deleting old branch)
		Delete Branch:
			From local: git branch -D branch_name
			From central: git push <remote_name> --delete <branch_name>
						Eg: git push origin --delete branch_name
					

GIT Log:			
			
		git log <file name>
			Eg: git log --pretty=oneline File1.txt
				or
			git log File1.txt	
				While using this 'git log filename' command, if the log history is too long, press 's'. 
				This enable prompt for creating a log file. Enter some name. Hit enter. 
				This creates a log file in the current folder with the given name. 
				To quit this mode press 'q' on bash editor. 

		git whatchanged --since '04/14/2013' --until '05/22/2014' --oneline --name-only --pretty=format:%an%an | sort | uniq 

		git log --since="1 month ago"
		
		git log --since="2 weeks 3 days 2 hours 30 minutes 59 seconds ago"

		For more graphical log history: 
			git log --graph --abbrev-commit --decorate --all --format=format:"%C(bold blue)%h%C(reset) 
			- %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)
			%n %C(white)%s%C(reset)"

		For current month
			git log  --graph --abbrev-commit --decorate --all --format=format:"%C(bold blue)%h%C(reset) 
			- %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C
			(white)%s%C(reset)" --after={'date "+%Y-%m-01"'}			

GIT Show 
		Showing the changes of a perticular commit if you know the commit hascode.
		git show <hashcode>	-- This shows the files with code changes
		git show --name-only <hashcode> - This shows only the names of the files.
		Atleast first 4 digits of the Hashcode are necessary to identify the commit.

GIT Stash:
		git stash list
		
		git stash save "<description>"
		
		git stash apply stash@{number} --  Apply the stash changes and keeps the stash in memory.
		
		git stash show stash@{number}   Eg : git stash show stash@{0}
		
		git stash drop stash@{number} --  Removes the stash memory.
		
		git stash clear -- Removes all the stashes from the memroy.
		
		git stash pop stash@{number} -- Apply the stash changes and removes the stash from memory.
		
		git stash pop    --->  equals to git stash pop stash@{0}
		
		git stash push -m <name of stash> <path/filename> -- Creates stash for the specified file.
				This is useful to pick the selected file from the list of modified files.
				Please remember that it works only for single file stash.
				Eg: git stash push -m my_changes src/selection/MemoryDefinitions.java
					
		
GIT Ignore: 
	Specify the regex pattern of the files to ignore in .ignore 
			Ignore files	Eg: *.idea
				    	    *.settings
			Ignore folders, subfolders  Eg: target
			                                target/*     
				 
	Alternatively you can add regex pattern of the file to 
	           1) LOCAL: the 'exclude' file uder .git/info folder of specific project
		   		   
		   2) GLOBAL: 
		   	a) set global file
				git config --global core.excludesfile C:\.gitignore 
			   assuming .gitignore file is placed under c: drive
			   and
			b) specify the regex patterns inside the .gitignore file.
		

GIT Alias : 
	We can use alias name for the long git commands 
			Eg: git config --global alias.please 'push --force-with-lease'		
			In this, please is the alias name for the command 'push --force-with-lease'
	To remove alias, use --unset  Eg: git config --global --unset alias.<aliasname>
	
	Imp Note: To use apostrophe(') in the alias command, use '"'"'
	For more details refer - 
		http://stackoverflow.com/questions/1250079/how-to-escape-single-quotes-within-single-quoted-strings

GIT Ammend : 
	Ever commit and then immediately realize you’d forgotten to stage a file? 
	'commit --amend --no-edit' , quietly tacks any staged files onto the last commit you created, 
	re-using your existing commit message. This works good as long as you haven’t pushed the last commit yet.
				
		
GIT Status:

	GIT Status --short --branch   lists the files in a very neat way than the regular git status command.
				

GIT Merge : 
	Merges the incoming branch to this branch.
		Eg: git merge master
	Merge by default performs fast-forward. That means, git silently merges incoming branch to this branch. 
		However, a new commit is possible only incase of merge conflicts.
	If --no-ff is used, the merge always force a new commit, indicating a merge happend.
		Eg: git merge --no-ff master

GIT Rebase: 
	Merges the incoming branch to this branch. However, re-writes all the till now commits of the current branch 
		to move them to the end of the incoming branch.
	Eg: git rebase master

GIT Reset:
	Moves the pointer of the current branch to the said commit. This is useful if we want to undo commits.
	Eg: Say the current brach has log history as follows:
		22a50bad272321f1c97d6c7b822f98685e8f6163 File1 - Commit3 - MR
		162e93ab37661687695b39cb1bd7bb83aa9aad0e File1 - Commit2 - MR
		69edb9db46bc2741f1707248e5e591f4c02a4084 File1 - Commit1 - MR

		After a new commit, it looks like this.
		4e81615206d933e5418596c2a671bc2cc6e6b3af File1 - Commit4 - MR
		22a50bad272321f1c97d6c7b822f98685e8f6163 File1 - Commit3 - MR
		162e93ab37661687695b39cb1bd7bb83aa9aad0e File1 - Commit2 - MR
		69edb9db46bc2741f1707248e5e591f4c02a4084 File1 - Commit1 - MR
		
		Now if we dont need the commit4, perform the below command
		>git reset 22a50bad2
		This sets the current branch pointer to Commit3. Notice, at least the first 4 alpha-numeric of the hascode 
		is necessary to identify the desired commit. 
		This command is very helpful to set the current branch to any desired previous commit.
		
GIT Merge Conflicts:
	In case merge conflicts happend, for say 2 files, the merge status would show up like this,
		$ git merge master     
  		Auto-merged _layouts/default.html
  		CONFLICT (content): Merge conflict in _layouts/default.html
		Auto-merged index.html
  		CONFLICT (content): Merge conflict in index.html
  		Automatic merge failed; fix conflicts and then commit the result.
		
		To retain our changes, use -->  git checkout --ours index.html
		To pull their changes, use -->  git checkout --theirs _layouts/default.html
		

GIT Cherry-Pick:
		An example:

			dd2e86 - 946992 - 9143a9 - a6fd86 - 5a6057 [master]
				   \
				    76cada - 62ecb3 - b886a0 [feature]
				    
		Let’s say you’ve written some code in commit 62ecb3 of the feature branch 
		   that is very important right now in master.
		In this case, 62ecb3 is the cherry and you want to pick it!
						git checkout master
						git cherry-pick 62ecb3
		That’s all. 62ecb3 is now applied to the master branch and commited (as a new commit) in master.

			dd2e86 - 946992 - 9143a9 - a6fd86 - 5a6057 - 62ecb3 [master]
				   \
				    76cada - 62ecb3 - b886a0 [feature]
				    
GIT Build specific Modules:
		mvn clean install -pl sub-module-name2,sub-module-name3

		# Build dependencies (also make)
			mvn clean install –pl sub-module-name2 –am

		# Build dependents (also make dependents)
			mvn clean install -pl sub-module-name2 –amd
